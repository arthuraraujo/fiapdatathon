name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - '*.md'
      - 'docs/**'
      - 'logs/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - '*.md'
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: arthuraraujo/datathon

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true

    - name: Create required directories
      run: |
        mkdir -p datathon_decision/data/processed
        mkdir -p datathon_decision/data/raw
        mkdir -p datathon_decision/models

    - name: Install dependencies
      run: uv sync

    - name: Run data preprocessing
      run: |
        uv run python -m datathon_decision.src.preprocess_utils datathon_decision/data/raw datathon_decision/data/processed

    - name: Train model
      run: |
        uv run python -m datathon_decision.src.train_pipeline

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image health
      run: |
        # Pull the image that was just built
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Run basic health check
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --help || true
        
        # You can add more specific health checks here
        echo "Docker image health check passed!"

    - name: Deploy notification
      if: success()
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üê≥ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "üöÄ Available platforms: linux/amd64, linux/arm64"