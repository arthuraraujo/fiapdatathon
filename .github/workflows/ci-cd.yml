name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - '*.md'
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true  # üëà Isso vai baixar os arquivos do Git LFS

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true

    - name: Create required directories
      run: |
        mkdir -p datathon_decision/data/processed
        mkdir -p datathon_decision/data/raw
        mkdir -p datathon_decision/models

    - name: Install dependencies
      run: |
        uv sync
        
        # Preparar requirements.txt para Docker
        uv export --format requirements-txt --no-hashes > requirements.txt
        
        # Verificar se os arquivos LFS foram baixados corretamente
        echo "üîç Checking Git LFS files..."
        echo "Files in raw data directory:"
        ls -la datathon_decision/data/raw/
        
        echo "üìä Checking file sizes (LFS files should be > 1KB):"
        du -h datathon_decision/data/raw/* || echo "No files found"
        
        echo "üéØ Checking specific JSON files from config:"
        test -f datathon_decision/data/raw/applicants.json && echo "‚úÖ applicants.json found" || echo "‚ùå applicants.json missing"
        test -f datathon_decision/data/raw/vagas.json && echo "‚úÖ vagas.json found" || echo "‚ùå vagas.json missing"  
        test -f datathon_decision/data/raw/prospects.json && echo "‚úÖ prospects.json found" || echo "‚ùå prospects.json missing"

    - name: Run data preprocessing
      run: |
        echo "üîç Checking directories before preprocessing..."
        ls -la datathon_decision/data/
        ls -la datathon_decision/data/raw/ || echo "Raw data directory is empty"
        
        echo "üöÄ Running preprocessing..."
        uv run python -m datathon_decision.src.preprocess_utils datathon_decision/data/raw datathon_decision/data/processed
        
        echo "‚úÖ Checking output after preprocessing..."
        ls -la datathon_decision/data/processed/ || echo "Processed directory is empty"
        ls -la datathon_decision/models/ || echo "Models directory is empty"

    - name: Train model and capture metrics
      run: |
        # Capture metrics output
        uv run python -m datathon_decision.src.train_pipeline > training_output.txt 2>&1

        # Extract metrics to JSON
        python -c "import json; import re; from datetime import datetime; output = open('training_output.txt').read(); accuracy_match = re.search(r'Acur√°cia: ([\\d.]+)', output); precision_match = re.search(r'Precis√£o: ([\\d.]+)', output); recall_match = re.search(r'Recall: ([\\d.]+)', output); f1_match = re.search(r'F1: ([\\d.]+)', output); roc_auc_match = re.search(r'ROC AUC: ([\\d.]+)', output); shapes_match = re.search(r'Shapes: X_train=\\((\\d+), (\\d+)\\)', output); metrics = {'timestamp': datetime.now().isoformat(), 'commit_sha': '${{ github.sha }}', 'branch': '${{ github.ref_name }}', 'accuracy': float(accuracy_match.group(1)) if accuracy_match else None, 'precision': float(precision_match.group(1)) if precision_match else None, 'recall': float(recall_match.group(1)) if recall_match else None, 'f1_score': float(f1_match.group(1)) if f1_match else None, 'roc_auc': float(roc_auc_match.group(1)) if roc_auc_match else None, 'train_samples': int(shapes_match.group(1)) if shapes_match else None, 'features_count': int(shapes_match.group(2)) if shapes_match else None}; json.dump(metrics, open('metrics.json', 'w'), indent=2); print(f'Metrics saved: {metrics}')"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64 
        # platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Cache otimizado
        cache-from: |
          type=gha
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
        # Build args para otimiza√ß√£o
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Upload metrics and logs
      uses: actions/upload-artifact@v4
      with:
        name: training-metrics-${{ github.sha }}
        path: |
          metrics.json
          training_output.txt
        retention-days: 90

    - name: Create metrics history
      run: |
        echo "üé® Generating metrics dashboard..."
        python scripts/generate_dashboard.py "${{ github.sha }}" "${{ github.ref_name }}" "${{ github.run_id }}" "${{ github.repository }}"

    - name: Upload dashboard
      uses: actions/upload-artifact@v4
      with:
        name: metrics-dashboard-${{ github.sha }}
        path: dashboard.html
        retention-days: 90

    - name: Deploy notification
      if: success()
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üê≥ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "üöÄ Available platforms: linux/amd64, linux/arm64"